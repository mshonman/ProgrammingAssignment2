x <- matrix(c(1, 3), c(2, 4))
x
x <- matrix(c(1, 3, 2, 4), nrow = 2, ncol = 2)
x
x <- matrix(c(1, 3, 2, 4), nrow = 2, ncol = 4)
x
x <- matrix(c(1, 3, 2, 4), nrow = 2, ncol = 3)
x
solve(x)
x <- matrix(c(1, 3, 2, 4), nrow = 2, ncol = 2)
x
solve(x)
y <- matrix(c(1, 3, 2, 4), nrow = 2, ncol = 2)
makeCacheMatrix <- function(x = matrix()) {
inverse <- solve(x)
}
makeCacheMatrix(y)
a <- makeVector(c(5,1,3))
plusFunctions <- function (){
plustwo <- function(y) {
x <- y + 2
return(x)
}
plusthree <- function(y) {
x <- y + 3
return(x)
}
#the following line stores the two functions:
list(plustwo = plustwo, plusthree = plusthree)
}
plusFunctions$plustwo(5)
a <- plusFunctions()
a$plustwo()
a$plustwo(4)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInv(inv)
inv
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
get <- function() x
setInv <- function(inverse) inv <<- inverse
getInv <- function() inv
list(get = get, setInv = setInv, getInv = getInv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInv(inv)
inv
}
a <- makeCacheMatrix(matrix(c(1,2,3,4), nrow = 2, ncol = 2))
a
a$get()
a$getInv()
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
value <- matrix(1:4, nrow = 2, ncol = 2)
x <- makeCacheMatrix(value)
cacheSolve(x)
cacheSolve(x)
